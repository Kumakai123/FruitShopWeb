package org.xiangan.fruitshopweb.service;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DuplicateKeyException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.scheduling.annotation.Async;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.xiangan.fruitshopweb.entity.Person;import org.xiangan.fruitshopweb.entity.Person_;import org.xiangan.fruitshopweb.enumType.LevelEnum;import org.xiangan.fruitshopweb.exception.CustomException;import org.xiangan.fruitshopweb.repository.PersonRepository;import java.util.Objects;import java.util.Optional;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutionException;/** * (服務層) 人員 */@Service@Slf4jpublic class PersonService implements UserDetailsService {	/**	 * (數據存取層)人員	 */	private final PersonRepository personRepository;	@Autowired	public PersonService(PersonRepository personRepository) {		this.personRepository = personRepository;	}	/**	 * 建立	 *	 * @param nickName    暱稱/稱呼	 * @param name        名字	 * @param level       身分等級	 * @param email       信箱	 * @param password    密碼	 * @param phoneNumber 連絡電話	 * @param company 公司行號/統編	 * @return 產品	 */	@Transactional	public Person create(		final String nickName,		final String name,		final LevelEnum level,		final String email,		final String password,		final String phoneNumber,		final String company) {		Person person = new Person();		if (Objects.nonNull(nickName)) {			person.setNickName(nickName.trim());		}		if (Optional.ofNullable(name).filter(s -> !s.isBlank()).isPresent()) {			person.setName(name.trim());		}		if (Optional.ofNullable(level).isPresent()) {			person.setLevel(level);		}		if (Optional.ofNullable(email).filter(s -> !s.isBlank()).isPresent()) {			UserDetails userDetails = this.loadUserByUsername(email);			if (Objects.nonNull(userDetails)){				throw new CustomException(					String.format("%s 信箱已被註冊",email));			}			person.setEmail(email.trim());		}		if (Optional.ofNullable(password).filter(s -> !s.isBlank()).isPresent()) {			person.setPassword(password.trim());		}		if (Optional.ofNullable(phoneNumber).filter(s -> !s.isBlank()).isPresent()) {			person.setPhoneNumber(phoneNumber.trim());		}		if (Optional.ofNullable(company).filter(s -> !s.isBlank()).isPresent()) {			person.setCompany(company.trim());		}		try {			return this.save(person).get();		} catch (Exception exception) {			throw new CustomException(				String.format("建立人員時拋出線程中斷異常：%s❗", exception.getLocalizedMessage()));		}	}	/**	 * @param entity 人員	 * @return 是否刪除成功	 */	@Async	@Transactional	public CompletableFuture<Boolean> delete(final Person entity) {		try {			personRepository.delete(entity);		} catch (Exception exception) {			throw new RuntimeException(				String.format(					"刪除人員「%s%s」時拋出異常：%s❗️",					entity.getNickName(),					entity.getName(),					exception.getLocalizedMessage()				),				exception			);		}		return CompletableFuture.completedFuture(true);	}	/**	 * @param phoneNumber 連絡電話	 * @param company 公司行號/統編	 * @return 是否有符合連絡電話、公司行號/統編的人員	 */	@Async	@Transactional(readOnly = true)	public CompletableFuture<Boolean> exist(		final String phoneNumber,		final String company	) {		return CompletableFuture.completedFuture(			personRepository				.exists(					(root, criteriaQuery, criteriaBuilder) ->						criteriaBuilder.and(							criteriaBuilder.equal(root.get(Person_.phoneNumber), phoneNumber),							criteriaBuilder.equal(root.get(Person_.company), company)						)				)		);	}	/**	 * @param id 主鍵	 * @return 身分是否為一般員工的人員	 */	@Async	@Transactional(readOnly = true)	public CompletableFuture<Boolean> exist(final String id) {		return CompletableFuture.completedFuture(			personRepository				.exists(					(root, criteriaQuery, criteriaBuilder) ->						criteriaBuilder.and(							criteriaBuilder.equal(root.get(Person_.level), LevelEnum.EMPLOYEE),							criteriaBuilder.equal(root.get(Person_.id),id)						)				)		);	}	/**	 * @param id 主鍵	 * @param phoneNumber 連絡電話	 * @param company 公司行號/統編	 * @return 是否有符合連絡主鍵、電話、公司行號/統編的人員	 */	@Async	@Transactional(readOnly = true)	public CompletableFuture<Boolean> exist(		final String id,		final String phoneNumber,		final String company	) {		return CompletableFuture.completedFuture(			personRepository				.exists(					(root, criteriaQuery, criteriaBuilder) ->						criteriaBuilder.and(							criteriaBuilder.not(								criteriaBuilder.equal(root.get(Person_.id), id)							),							criteriaBuilder.equal(root.get(Person_.phoneNumber), phoneNumber),							criteriaBuilder.equal(root.get(Person_.company), company)						)				)		);	}	/**	 * @param id 主鍵	 * @return 人員	 */	@Async	@Transactional(readOnly = true)	public CompletableFuture<Person> load(final String id) {		return CompletableFuture.completedFuture(				personRepository						.findOne(								(root, criteriaQuery, criteriaBuilder) ->										criteriaBuilder.equal(root.get(Person_.id), id)						).orElseThrow(								() -> new CustomException(									String.format("無主鍵為「%s」的人員❗️", id))						));	}	/**	 * @param p 頁數	 * @param s 一頁幾筆	 * @return 可分頁的人員們	 */	@Async	@Transactional(readOnly = true)	public CompletableFuture<Page<Person>> load(final int p, final int s) {		return CompletableFuture.completedFuture(			personRepository				.findAll(					(root, criteriaQuery, criteriaBuilder) -> {						criteriaQuery.orderBy(							criteriaBuilder.asc(root.get(Person_.NICK_NAME)),							criteriaBuilder.asc(root.get(Person_.NAME)),							criteriaBuilder.asc(root.get(Person_.id))						);						return criteriaBuilder.conjunction();					},					PageRequest.of(p, s)				)		);	}	/**	 * @param entity 人員	 * @return 持久化人員	 */	@Async	@Transactional	public CompletableFuture<Person> save(final Person entity) {		final String id = entity.getId();		final String company = entity.getCompany();		final String phoneNumber = entity.getPhoneNumber();		try {			if (Objects.isNull(id)) {				if (exist(phoneNumber, company).get()) {					throw new DuplicateKeyException(						String.format(							"已有重複的人員電話：%s❗️",							phoneNumber						)					);				}			} else {				if (exist(id,phoneNumber,company).get()) {					throw new DuplicateKeyException(						String.format(							"已有重複的人員電話：%s❗️",							phoneNumber						)					);				}			}		} catch (InterruptedException | ExecutionException exception) {			throw new RuntimeException(				String.format(					"讀取是否有重複的人員時發生線程中斷異常：%s❗️",					exception.getLocalizedMessage()				),				exception			);		}		try {			return CompletableFuture.completedFuture(				personRepository.saveAndFlush(entity)			);		} catch (Exception exception) {			throw new RuntimeException(				String.format(					"持久化人員時拋出線程中斷異常：%s❗️",					exception.getLocalizedMessage()				),				exception			);		}	}    /**     * 編輯     *     * @param id          人員主鍵     * @param nickName    暱稱/稱呼     * @param name        名字     * @param level       身分等級     * @param email       信箱     * @param password    密碼     * @param phoneNumber 連絡電話     * @param company 公司行號/統編     * @return 人員     */	@Transactional	public Person update(			final String id			, final String nickName			, final String name			, final LevelEnum level			, final String email			, final String password			, final String phoneNumber			, final String company) {		Person person;		try {			person = this.load(id).get();		} catch (InterruptedException | ExecutionException exception) {			throw new CustomException(					String.format("讀取人員「%s」時拋出線程中斷異常：%s❗", id, exception.getLocalizedMessage()));		}		if (Optional.ofNullable(nickName).isPresent()) {			person.setNickName(nickName.trim());		}		if (Optional.ofNullable(name).filter(s -> !s.isBlank()).isPresent()) {			person.setName(name.trim());		}		if (Optional.ofNullable(level).isPresent()) {			person.setLevel(level);		}		if (Optional.ofNullable(email).filter(s -> !s.isBlank()).isPresent()) {			person.setEmail(email.trim());		}		if (Optional.ofNullable(password).filter(s -> !s.isBlank()).isPresent()) {			person.setPassword(password.trim());		}		if (Optional.ofNullable(phoneNumber).filter(s -> !s.isBlank()).isPresent()) {			person.setPhoneNumber(phoneNumber.trim());		}		if (Optional.ofNullable(company).filter(s -> !s.isBlank()).isPresent()) {			person.setCompany(company.trim());		}		try {			return this.save(person).get();		} catch (Exception exception) {			throw new CustomException(					String.format("編輯人員「%s」時拋出線程中斷異常：%s❗", id, exception.getLocalizedMessage()));		}	}	@Override	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {		return personRepository.findByEmail(email)			.orElseThrow(				() -> new UsernameNotFoundException(String.format("user with email %s not found", email))			);	}}